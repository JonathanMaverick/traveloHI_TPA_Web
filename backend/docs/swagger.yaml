definitions:
  model.BedType:
    properties:
      roomName:
        type: string
      roomTypeID:
        type: integer
    type: object
  model.Hotel:
    properties:
      address:
        type: string
      description:
        type: string
      hotelID:
        type: integer
      name:
        type: string
    type: object
  model.Room:
    properties:
      hotelID:
        type: integer
      occupancy:
        type: integer
      price:
        type: integer
      quantity:
        type: integer
      roomID:
        type: integer
      roomName:
        type: string
      roomTypeID:
        type: integer
    type: object
  model.User:
    properties:
      dob:
        type: string
      email:
        type: string
      firstName:
        type: string
      gender:
        type: string
      lastName:
        type: string
      password:
        type: string
      personalSecurityAnswer:
        type: string
      profilePicture:
        type: string
      role:
        type: string
      status:
        type: string
      subscribedToNewsletter:
        type: boolean
      userID:
        type: integer
      wallet:
        type: number
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: VK TPA Website API Documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: TPA-Website
  version: "1.0"
paths:
  /hotel:
    get:
      consumes:
      - application/json
      description: Get a list of hotel
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Hotel'
            type: array
      summary: List hotel
      tags:
      - Hotel
  /hotel/{hotelId}/rooms:
    get:
      consumes:
      - application/json
      description: Get a list of rooms for a specific hotel
      parameters:
      - description: Hotel ID
        in: path
        name: hotelId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Room'
            type: array
      summary: List rooms for a hotel
      tags:
      - Room
  /room:
    get:
      consumes:
      - application/json
      description: Get a list of rooms
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Room'
            type: array
      summary: List rooms
      tags:
      - Room
  /room/type:
    get:
      consumes:
      - application/json
      description: Get a list of bedtypes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.BedType'
            type: array
      summary: List bed types
      tags:
      - Room
  /user:
    get:
      consumes:
      - application/json
      description: Get a list of users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
      summary: List users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Create user
      tags:
      - User
  /user/{userId}:
    get:
      consumes:
      - application/json
      description: Get a specific user account
      parameters:
      - description: User ID
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/model.User'
      summary: Get a user
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: Login a user
      parameters:
      - description: User details
        in: body
        name: user
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login user
      tags:
      - User
swagger: "2.0"
